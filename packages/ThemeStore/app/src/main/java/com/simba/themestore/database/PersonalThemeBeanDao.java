package com.simba.themestore.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.simba.themestore.model.personal.PersonalThemeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PersonalThemeDTO".
*/
public class PersonalThemeBeanDao extends AbstractDao<PersonalThemeBean, String> {

    public static final String TABLENAME = "PersonalThemeDTO";

    /**
     * Properties of entity PersonalThemeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Typeid = new Property(1, String.class, "typeid", false, "TYPEID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Coverurl = new Property(3, String.class, "coverurl", false, "COVERURL");
        public final static Property VipID = new Property(4, String.class, "vipID", false, "VIP_ID");
    }


    public PersonalThemeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PersonalThemeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PersonalThemeDTO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TYPEID\" TEXT," + // 1: typeid
                "\"TITLE\" TEXT," + // 2: title
                "\"COVERURL\" TEXT," + // 3: coverurl
                "\"VIP_ID\" TEXT);"); // 4: vipID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PersonalThemeDTO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonalThemeBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String typeid = entity.getTypeid();
        if (typeid != null) {
            stmt.bindString(2, typeid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String coverurl = entity.getCoverurl();
        if (coverurl != null) {
            stmt.bindString(4, coverurl);
        }
 
        String vipID = entity.getVipID();
        if (vipID != null) {
            stmt.bindString(5, vipID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonalThemeBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String typeid = entity.getTypeid();
        if (typeid != null) {
            stmt.bindString(2, typeid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String coverurl = entity.getCoverurl();
        if (coverurl != null) {
            stmt.bindString(4, coverurl);
        }
 
        String vipID = entity.getVipID();
        if (vipID != null) {
            stmt.bindString(5, vipID);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PersonalThemeBean readEntity(Cursor cursor, int offset) {
        PersonalThemeBean entity = new PersonalThemeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // typeid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // coverurl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // vipID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonalThemeBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTypeid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCoverurl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVipID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PersonalThemeBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(PersonalThemeBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PersonalThemeBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
