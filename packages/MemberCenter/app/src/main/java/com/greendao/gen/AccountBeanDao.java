package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.simba.membercenter.bean.AccountBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT_BEAN".
*/
public class AccountBeanDao extends AbstractDao<AccountBean, Long> {

    public static final String TABLENAME = "ACCOUNT_BEAN";

    /**
     * Properties of entity AccountBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USER_NAME");
        public final static Property Nickname = new Property(2, String.class, "nickname", false, "NICK_NAME");
        public final static Property IsLogined = new Property(3, Boolean.class, "isLogined", false, "IS_LOGINED");
        public final static Property Token = new Property(4, String.class, "token", false, "TOKEN");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property Openid = new Property(6, String.class, "openid", false, "OPENID");
        public final static Property Headimgurl = new Property(7, String.class, "headimgurl", false, "HEADIMGURL");
        public final static Property Sex = new Property(8, int.class, "sex", false, "SEX");
        public final static Property Owned = new Property(9, int.class, "owned", false, "OWNED");
    }


    public AccountBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AccountBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: username
                "\"NICK_NAME\" TEXT," + // 2: nickname
                "\"IS_LOGINED\" INTEGER," + // 3: isLogined
                "\"TOKEN\" TEXT," + // 4: token
                "\"PHONE\" TEXT," + // 5: phone
                "\"OPENID\" TEXT," + // 6: openid
                "\"HEADIMGURL\" TEXT," + // 7: headimgurl
                "\"SEX\" INTEGER NOT NULL ," + // 8: sex
                "\"OWNED\" INTEGER NOT NULL );"); // 9: owned
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AccountBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        Boolean isLogined = entity.getIsLogined();
        if (isLogined != null) {
            stmt.bindLong(4, isLogined ? 1L: 0L);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(5, token);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(7, openid);
        }
 
        String headimgurl = entity.getHeadimgurl();
        if (headimgurl != null) {
            stmt.bindString(8, headimgurl);
        }
        stmt.bindLong(9, entity.getSex());
        stmt.bindLong(10, entity.getOwned());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AccountBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        Boolean isLogined = entity.getIsLogined();
        if (isLogined != null) {
            stmt.bindLong(4, isLogined ? 1L: 0L);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(5, token);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(7, openid);
        }
 
        String headimgurl = entity.getHeadimgurl();
        if (headimgurl != null) {
            stmt.bindString(8, headimgurl);
        }
        stmt.bindLong(9, entity.getSex());
        stmt.bindLong(10, entity.getOwned());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AccountBean readEntity(Cursor cursor, int offset) {
        AccountBean entity = new AccountBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickname
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isLogined
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // token
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // openid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // headimgurl
            cursor.getInt(offset + 8), // sex
            cursor.getInt(offset + 9) // owned
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AccountBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsLogined(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setToken(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOpenid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHeadimgurl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSex(cursor.getInt(offset + 8));
        entity.setOwned(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AccountBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AccountBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AccountBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
